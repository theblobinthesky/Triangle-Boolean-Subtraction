#include "occl_cull.h"
#include "algorithm.h"
#include <glm/vec2.hpp>
#include <glm/gtx/norm.hpp>
#include <glm/gtx/string_cast.hpp>
#include <string.h>

inline bool intervals_intersect(f32 l_a, f32 r_a, f32 l_b, f32 r_b) {
    bool is_a_in_b = (l_b <= l_a && l_a <= r_b) || (l_b <= r_a && r_a <= r_b);
    bool is_b_in_a = (l_a <= l_b && l_b <= r_a) || (l_a <= r_b && r_b <= r_a);
    return is_a_in_b || is_b_in_a;
}

struct rectangle {
    const glm::vec2 tl;
    const glm::vec2 br;

    rectangle(const glm::vec2&& tl, glm::vec2&& br) : tl(std::move(tl)), br(std::move(br)) {}

    int compare(const rectangle& other, uint dim) const {
        if (dim == 0) {
            if (tl.x < other.tl.x && br.x < other.tl.x) {
                return -1;
            } else {
                return 1;
            }
        } else {
            if (tl.y < other.tl.y && br.y < other.tl.y) {
                return -1;
            } else {
                return 1;
            }
        }
    };

    bool intersect(const rectangle &b) const {
        return intervals_intersect(tl.x, br.x, b.tl.x, b.br.x) && intervals_intersect(tl.y, br.y, b.tl.y, b.br.y);
    };
};

void print(const std::vector<const rectangle *>&& vec) {
    printf("Intersections:\n");

    for(const rectangle *rect: vec) {
        printf("tl: %s, br: %s\n", glm::to_string(rect->tl).c_str(), glm::to_string(rect->br).c_str());
    }

    printf("\n");
}

/*
void octree_test() {
    Octree<rectangle> test;
    test.insert(rectangle(glm::vec2(1, 1), glm::vec2(6, 4)));
    test.insert(rectangle(glm::vec2(17, 8), glm::vec2(20, 14)));
    test.insert(rectangle(glm::vec2(20, 1), glm::vec2(24, 6)));
    test.insert(rectangle(glm::vec2(14, 2), glm::vec2(21, 5)));
    test.insert(rectangle(glm::vec2(1, 12), glm::vec2(12, 14)));
    test.insert(rectangle(glm::vec2(4, 7), glm::vec2(19, 13)));
    test.insert(rectangle(glm::vec2(7, 1), glm::vec2(13, 9)));
    test.insert(rectangle(glm::vec2(2, 3), glm::vec2(8, 11)));
    test.insert(rectangle(glm::vec2(12, 4), glm::vec2(18, 10)));

    print(test.intersect(rectangle(glm::vec2(6, 6), glm::vec2(9, 10))));
    print(test.intersect(rectangle(glm::vec2(17, 3), glm::vec2(22, 6))));
    print(test.intersect(rectangle(glm::vec2(2, 11), glm::vec2(19, 14))));
    print(test.intersect(rectangle(glm::vec2(3, 2), glm::vec2(9, 5))));
}
*/

int test_passed_counter;
int test_total_counter;

void test(std::string name, const triangle& minuend, const triangle& subtr, const std::vector<triangle>& expected) {
    test_total_counter++;

    for (const triangle& tri: expected) {
        if (!tri_is_winding_cc(tri)) {
            printf("\033[31mTest '%s' failed! Expected clockwise winding.\033[0m\n", name.c_str());
            return;
        }
    }

    std::vector<triangle> got;
    subtract_triangles(minuend, subtr, got);

    for (const triangle& tri: got) {
        if (!tri_is_winding_cc(tri)) {
            printf("\033[31mTest '%s' failed! Got clockwise winding.\033[0m\n", name.c_str());
            return;
        }
    }

    if (got.size() == expected.size()) {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                f32 epsilon = 0.01f;
                bool passed = true;

                for (size_t i = 0; i < got.size(); i++) {
                    const triangle& tri_got = got[i], &tri_expected = expected[i];

                    f32 ds[3];
                    for (int d = 0; d < 3; d++) {
                        ds[d] = glm::distance(tri_got.pts[d], tri_expected.pts[d]);
                    }

                    if (ds[0] > epsilon || ds[1] > epsilon || ds[2] > epsilon) {
                        passed = false;
                        break;
                    }
                }

                if (passed) {
                    printf("\033[32mTest '%s' passed!\033[0m\n", name.c_str());
                    test_passed_counter++;
                    return;
                }
            }
        }
    }

    printf("\033[31mTest '%s' failed!\n", name.c_str());
    printf("Triangles:\n");
    print({minuend, subtr});
    printf("Got:\n");
    print(got);
    printf("Expected:\n");
    print(expected);
    printf("\033[0m");
}

void begin_test() {
    test_total_counter = 0;
    test_passed_counter = 0;
}

void end_test() {
    if (test_passed_counter == test_total_counter) {
        printf("\033[32mTESTS PASSED: %d/%d tests passed!\033[0m\n", test_passed_counter, test_total_counter);
    } else {
        printf("\033[31mTESTS FAILED: %d/%d tests passed!\033[0m\n", test_passed_counter, test_total_counter);
    }
}

void triangle_boolean_tests() {
    begin_test();

#if true
    test("no overlap", {{{0, 0}, {1, 0}, {1, 1}}}, {{{2, 2}, {3, 4}, {2, 3}}}, {{{{0, 0}, {1, 0}, {1, 1}}}});
 
    test("minuend inside subtrahend, 2 inters. 1", {{{2, 2}, {3, 2}, {3, 3}}}, {{{1, 1}, {3, 1}, {3, 3}}}, {});
    test("minuend inside subtrahend, 3 inters. 1", {{{2, 1}, {3, 2}, {1, 3}}}, {{{0, 2}, {4, 0}, {2, 4}}}, {});

    test("subtrahend inside minuend 1", {{{1, 1}, {3, 1}, {3, 3}}}, {{{2, 2}, {3, 2}, {3, 3}}},
        {{{{1.00, 1.00}, {3.00, 1.00}, {2.00, 2.00}}}, {{{3.00, 1.00}, {3.00, 2.00}, {2.00, 2.00}}}});

    test("minuend_outside_count 3, subtr_inside_count 1, inters_count 2; test 1", {{{3, 0}, {8, 0}, {6, 4}}}, {{{1, 2}, {7, 1}, {4, 6}}}, 
        {{{{8.00, 0.00}, {6.00, 4.00}, {7.00, 1.00}}}, {{{6.00, 4.00}, {5.56, 3.41}, {7.00, 1.00}}}, 
        {{{8.00, 0.00}, {7.00, 1.00}, {3.00, 0.00}}}, {{{7.00, 1.00}, {4.11, 1.48}, {3.00, 0.00}}}});

    test("minuend_outside_count 3, subtr_inside_count 1, inters_count 2; test 2", {{{0, 2}, {4, 5}, {1, 7}}}, {{{2, 0}, {6, 4}, {1, 4}}}, 
        {{{{1.00, 7.00}, {0.00, 2.00}, {1.00, 4.00}}}, {{{0.00, 2.00}, {1.26, 2.95}, {1.00, 4.00}}}, 
        {{{1.00, 7.00}, {1.00, 4.00}, {4.00, 5.00}}}, {{{1.00, 4.00}, {2.67, 4.00}, {4.00, 5.00}}}});

    test("minuend_outside_count 3, subtr_inside_count 1, inters_count 2; test 3", {{{1, 6}, {0, 3}, {5, 2}}}, {{{1, 2}, {3, 2}, {3, 3}}}, 
        {{{{1.00, 6.00}, {0.00, 3.00}, {3.00, 3.00}}}, {{{0.00, 3.00}, {2.14, 2.57}, {3.00, 3.00}}}, 
        {{{1.00, 6.00}, {3.00, 3.00}, {5.00, 2.00}}}, {{{3.00, 3.00}, {3.00, 2.40}, {5.00, 2.00}}}});

    test("minuend_outside_count 3, subtr_inside_count 1, inters_count 2; test 4", {{{2, 0}, {5, 0}, {5, 5}}}, {{{0, 2}, {4, 1}, {2, 5}}}, 
        {{{{5.00, 0.00}, {5.00, 5.00}, {4.00, 1.00}}}, {{{5.00, 5.00}, {3.36, 2.27}, {4.00, 1.00}}}, 
        {{{5.00, 0.00}, {4.00, 1.00}, {2.00, 0.00}}}, {{{4.00, 1.00}, {2.78, 1.30}, {2.00, 0.00}}}});

    test("minuend outside over 1 subtrahend corner, 3 inters. 1", {{{2, 0}, {5, 0}, {5, 5}}}, {{{0, 2}, {5, 1}, {2, 5}}}, 
        {{{{5.00, 5.00}, {3.67, 2.78}, {5.00, 1.00}}}, {{{5.00, 0.00}, {5.00, 1.00}, {2.00, 0.00}}}, {{{5.00, 1.00}, {2.86, 1.43}, {2.00, 0.00}}}});

    test("minuend outside over 2 subtrahend corners, 2 inters. 1", {{{1, 0}, {5, 2}, {0, 3}}}, {{{1, 2}, {3, 2}, {3, 5}}}, 
        {{{{1.00, 0.00}, {5.00, 2.00}, {3.00, 2.00}}}, {{{5.00, 2.00}, {3.00, 2.40}, {3.00, 2.00}}}, 
        {{{1.00, 0.00}, {1.00, 2.00}, {0.00, 3.00}}}, {{{1.00, 2.00}, {1.47, 2.71}, {0.00, 3.00}}}, 
        {{{1.00, 0.00}, {3.00, 2.00}, {1.00, 2.00}}}});
    test("minuend outside over 2 subtrahend corners, 2 inters. 2", {{{-1, 2}, {3, 3}, {1, 8}}}, {{{5, 2}, {1, 6}, {1, 5}}}, 
        {{{{-1.00, 2.00}, {3.00, 3.00}, {1.00, 5.00}}}, {{{3.00, 3.00}, {2.71, 3.71}, {1.00, 5.00}}}, 
        {{{-1.00, 2.00}, {1.00, 6.00}, {1.00, 8.00}}}, {{{1.00, 6.00}, {2.33, 4.67}, {1.00, 8.00}}}, 
        {{{-1.00, 2.00}, {1.00, 5.00}, {1.00, 6.00}}}});
    
    test("minuend outside over 2 subtrahend corners, 3 inters. 1", {{{1, 0}, {7, 3}, {0, 5}}}, {{{5, 2}, {4, 6}, {1, 4}}}, 
        {{{{7.00, 3.00}, {4.58, 3.69}, {5.00, 2.00}}}, {{{1.00, 0.00}, {1.00, 4.00}, {0.00, 5.00}}}, 
        {{{1.00, 4.00}, {1.75, 4.50}, {0.00, 5.00}}}, {{{1.00, 0.00}, {5.00, 2.00}, {1.00, 4.00}}}});
    
    test("minuend 1 corner in subtr., subtr. outside, 2 inters. 1", 
        {{{0, 0}, {4, 0}, {2, 4}}}, {{{0, 3}, {4, 2}, {4, 6}}}, 
        {{{{0.00, 0.00}, {4.00, 0.00}, {1.33, 2.67}}}, {{{4.00, 0.00}, {2.86, 2.29}, {1.33, 2.67}}}});
    
    test("minuend 1 corner in subtr., subtr. outside, 3 inters. 1", 
        {{{1, 1}, {5, 0}, {3, 5}}}, {{{1, 3}, {5, 3}, {4, 6}}}, 
        {{{{1.00, 1.00}, {5.00, 0.00}, {2.00, 3.00}}}, {{{5.00, 0.00}, {3.80, 3.00}, {2.00, 3.00}}}});

    test("minuend 1 corner in subtr., subtr. 1 corner in minuend, 2 inters. 1", {{{0, 1}, {3, 2}, {0, 3}}}, {{{1, 2}, {6, 0}, {6, 4}}}, 
        {{{{0.00, 3.00}, {1.00, 2.00}, {1.91, 2.36}}}, {{{0.00, 1.00}, {1.91, 1.64}, {1.00, 2.00}}}, 
        {{{0.00, 1.00}, {1.00, 2.00}, {0.00, 3.00}}}});

    test("minuend 1 corner in subtr., subtr. 1 corner in minuend, 3 inters. 1", {{{5, 2}, {1, 3}, {3, 0}}}, {{{0, 2}, {3, 1}, {2, 4}}}, 
        {{{{3.00, 0.00}, {3.00, 1.00}, {2.14, 1.29}}}, {{{5.00, 2.00}, {2.45, 2.64}, {3.00, 1.00}}}, {{{5.00, 2.00}, {3.00, 1.00}, {3.00, 0.00}}}});
    test("minuend 1 corner in subtr., subtr. 1 corner in minuend, 3 inters. 2", {{{0, 1}, {5, 2}, {0, 3}}}, {{{2, 2}, {5, 0}, {5, 4}}}, 
        {{{{0.00, 3.00}, {2.00, 2.00}, {2.69, 2.46}}}, {{{0.00, 1.00}, {2.69, 1.54}, {2.00, 2.00}}}, {{{0.00, 1.00}, {2.00, 2.00}, {0.00, 3.00}}}});

    test("minuend 1 corner in subtr., subtr. two corners in minuend, 2 inters. 1", {{{2, 4}, {5, 0}, {5, 8}}}, {{{0, 4}, {4, 2}, {4, 6}}}, 
        {{{{5.00, 0.00}, {4.00, 2.00}, {3.20, 2.40}}}, {{{5.00, 8.00}, {3.20, 5.60}, {4.00, 6.00}}}, 
        {{{5.00, 0.00}, {5.00, 8.00}, {4.00, 2.00}}}, {{{5.00, 8.00}, {4.00, 6.00}, {4.00, 2.00}}}});

    test("minuend 2 corners in subtr., subtr. outside, 2 inters. 1", {{{1, 0}, {2, 3}, {1, 2}}}, {{{0, 2}, {3, 1}, {2, 4}}}, 
        {{{{1.00, 0.00}, {1.50, 1.50}, {1.00, 1.67}}}});

    test("minuend 2 corners in subtr., subtr. outside, 3 inters. 1", {{{4, 3}, {2, 4}, {2, 0}}}, {{{0, 3}, {5, 1}, {4, 5}}}, 
        {{{{2.00, 0.00}, {3.16, 1.74}, {2.00, 2.20}}}});

    test("minuend 2 corners in subtr., subtr. 1 corner in minuend, 2 inters. 1", {{{5, -1}, {2, 3}, {1, 2}}}, {{{0, 2}, {3, 1}, {2, 4}}}, 
        {{{{5.00, -1.00}, {2.60, 2.20}, {3.00, 1.00}}}, {{{5.00, -1.00}, {3.00, 1.00}, {1.80, 1.40}}}});

    test("minuend outside, subtr. outside, 4 inters. 1", {{{4, 0}, {1, 4}, {0, 3}}}, {{{0, 1}, {3, 2}, {2, 4}}},
        {{{{4.00, 0.00}, {2.60, 1.87}, {1.85, 1.62}}}, {{{1.00, 4.00}, {0.00, 3.00}, {1.53, 3.29}}}, {{{0.00, 3.00}, {0.89, 2.33}, {1.53, 3.29}}}});

    test("minuend outside, subtr. outside, 4 inters. 2", {{{4, 0}, {1, 4}, {0, 3}}}, {{{3, 2}, {2, 4}, {0, 1}}}, 
        {{{{4.00, 0.00}, {2.60, 1.87}, {1.85, 1.62}}}, {{{1.00, 4.00}, {0.00, 3.00}, {1.53, 3.29}}}, {{{0.00, 3.00}, {0.89, 2.33}, {1.53, 3.29}}}});

    test("minuend 1 corner in subtr., subtr. outside, 4 inters. 1", {{{2, 0}, {5, 3}, {2, 3}}}, {{{0, 3}, {4, 0}, {3, 4}}},
        {{{{2.00, 0.00}, {2.86, 0.86}, {2.00, 1.50}}}, {{{5.00, 3.00}, {3.25, 3.00}, {3.60, 1.60}}}});

    test("minuend outside, subtr. 1 corner in minuend, 4 inters. 1", {{{0, 3}, {4, 0}, {3, 4}}}, {{{2, 0}, {5, 3}, {2, 3}}},
        {{{{4.00, 0.00}, {3.60, 1.60}, {2.86, 0.86}}}, {{{2.00, 3.00}, {3.25, 3.00}, {3.00, 4.00}}}, 
        {{{2.00, 3.00}, {3.00, 4.00}, {0.00, 3.00}}}, {{{0.00, 3.00}, {2.00, 1.50}, {2.00, 3.00}}}});
    
    test("minuend 1 corner in subtr., subtr. outside, 5 inters. 1", {{{1, 0}, {4, 3}, {1, 3}}}, {{{0, 2}, {3, 0}, {2, 4}}},
        {{{{1.00, 0.00}, {1.80, 0.80}, {1.00, 1.33}}}, {{{4.00, 3.00}, {2.25, 3.00}, {2.60, 1.60}}}});

    test("minuend outside, subtr. 1 corner in minuend, 5 inters. 1", {{{0, 2}, {3, 0}, {2, 4}}}, {{{1, 0}, {4, 3}, {1, 3}}},
        {{{{3.00, 0.00}, {2.60, 1.60}, {1.80, 0.80}}}, {{{1.00, 3.00}, {2.25, 3.00}, {2.00, 4.00}}}, {{{0.00, 2.00}, {1.00, 1.33}, {1.00, 3.00}}}});

    test("minuend outside, subtr. outside, 6 inters. 1", {{{0, 2}, {4, 1}, {2, 4}}}, {{{1, 0}, {4, 3}, {0, 4}}},
        {{{{4.00, 1.00}, {3.20, 2.20}, {2.40, 1.40}}}, {{{2.00, 4.00}, {1.60, 3.60}, {2.40, 3.40}}}, 
        {{{0.00, 2.00}, {0.53, 1.87}, {0.40, 2.40}}}});

    test("minuend 2 corners in subtr., subtr. outside, overlapping lines, 2 inters., 1", {{{1, 0}, {3, 0}, {3, 3}}}, {{{0, 0}, {4, 0}, {2, 3}}}, 
        {{{{3.00, 3.00}, {2.50, 2.25}, {3.00, 1.50}}}});
    test("minuend 2 corners in subtr., subtr. outside, overlapping lines, 2 inters., 2", {{{1, 0}, {2, 4}, {1, 3}}}, {{{0, 2}, {3, 1}, {2, 4}}}, 
        {{{{1.00, 0.00}, {1.38, 1.54}, {1.00, 1.67}}}});
    test("minuend 2 corners in subtr., subtr. outside, overlapping lines, 2 inters., 3", {{{1, 0}, {1.5, 3.5}, {1, 3}}}, {{{0, 2}, {3, 1}, {2, 4}}}, 
         {{{{1.00, 0.00}, {1.23, 1.59}, {1.00, 1.67}}}});

    test("minuend 1 corner in subtr. on line, subtr. outside, 2 inters., 1", {{{-1, 1}, {3, 1}, {-1, 2}}}, {{{2, 0}, {4, 2}, {2, 5}}}, 
        {{{{-1.00, 2.00}, {-1.00, 1.00}, {2.00, 1.25}}}, {{{-1.00, 1.00}, {2.00, 1.00}, {2.00, 1.25}}}});

    test("tdd. 1", {{{2, 0}, {2, 3}, {0, 3}}}, {{{2, 2}, {3, 2}, {1, 3}}}, 
        {{{{0.00, 3.00}, {2.00, 0.00}, {1.00, 3.00}}}, {{{2.00, 0.00}, {2.00, 2.00}, {1.00, 3.00}}}, {{{1.00, 3.00}, {2.00, 2.50}, {2.00, 3.00}}}});

    test("tdd. 2", {{{3, 3}, {0, 3}, {3, 0}}}, {{{4, 1}, {2, 1}, {2, 0}}}, 
        {{{{3.00, 0.00}, {3.00, 0.50}, {2.67, 0.33}}}, {{{3.00, 3.00}, {0.00, 3.00}, {3.00, 1.00}}}, {{{0.00, 3.00}, {2.00, 1.00}, {3.00, 1.00}}}});

    test("tdd. 3", {{{2, 1}, {2, -2}, {5, -2}}}, {{{0, 3}, {0, 0}, {3, 0}}}, 
        {{{{5.00, -2.00}, {3.00, 0.00}, {2.00, -2.00}}}, {{{3.00, 0.00}, {2.00, 0.00}, {2.00, -2.00}}}});

    test("tdd. 4", {{{1, 2}, {4, 1}, {3, 2}}}, {{{0, 2}, {3, 0}, {2, 2}}}, 
        {{{{3.00, 2.00}, {2.00, 2.00}, {4.00, 1.00}}}, {{{2.00, 2.00}, {2.20, 1.60}, {4.00, 1.00}}}});

    test("tdd. 5", {{{0, 3}, {2, 0}, {2, 3}}}, {{{0, 3}, {4, 1}, {4, 3}}}, {{{{2.00, 0.00}, {2.00, 2.00}, {0.00, 3.00}}}});

    test("tdd. 6", {{{3, 1}, {3, 0}, {5, 1}}}, {{{4, 0}, {4, 2}, {2, 2}}}, 
        {{{{5.00, 1.00}, {4.00, 1.00}, {4.00, 0.50}}}, {{{3.00, 0.00}, {3.67, 0.33}, {3.00, 1.00}}}});

    test("tdd. 7", {{{3, 3}, {0, 3}, {3, 0}}}, {{{4, 1}, {2, 1}, {2, 0}}},
        {{{{3, 0}, {3, 0.5}, {2.66666675, 0.333333254}}}, {{{3, 3}, {0, 3}, {3, 1}}}, {{{0, 3}, {2, 1}, {3, 1}}}});   

    test("tdd. 8", {{{0, 3}, {0, 0}, {3, 0}}}, {{{3, 0}, {5, 0}, {5, 2}}}, 
        {{{{0.00, 3.00}, {0.00, 0.00}, {3.00, 0.00}}}});   
    test("tdd. 9", {{{0, 2}, {3, 0}, {3, 2}}}, {{{3, 2}, {5, 0}, {5, 2}}}, 
        {{{{0.00, 2.00}, {3.00, 0.00}, {3.00, 2.00}}}});   

    test("tdd. 10", {{{1, 2}, {2, 2}, {2, 3}}}, {{{2, 2}, {4, 0}, {4, 2}}}, 
        {{{{1, 2}, {2, 2}, {2, 3}}}});   

    test("minuend corner on subtr. corner with no bounce off", {{{0, 1}, {1, 1}, {2, 3}}}, {{{0, 0}, {3, 3}, {2, 3}}}, 
        {{{{0.00, 1.00}, {0.67, 1.00}, {2.00, 3.00}}}});

    test("minuend corner on subtr. corner with bounce off", {{{1, 1}, {2, 2}, {2, 3}}}, {{{0, 0}, {3, 3}, {2, 3}}}, {});

    test("inf. line, no intersection, 1", {{{1, 1.5}, {2, 3}, {1, 3}}}, {{{0, 1}, {1, 0}, {1, 2}}}, {{{{1, 1.5}, {2, 3}, {1, 3}}}});
    test("inf. line, no intersection, 2", {{{1, 2}, {1, 4}, {0, 4}}}, {{{1, 3}, {1, 0}, {2, 0}}}, {{{{1, 2}, {1, 4}, {0, 4}}}});

    test("inf. line, touching corners but no intersection, 1", {{{1, 1}, {0, 2}, {0.5, 1}}}, {{{1, 1}, {2, 0}, {2, 2}}}, {{{{1, 1}, {0, 2}, {0.5, 1}}}});

    test("inf. line, subtr. in minuend", {{{0, 0}, {5, 0}, {2, 3}}}, {{{1, 0}, {3, 0}, {2, 2}}}, 
        {{{{5.00, 0.00}, {2.00, 3.00}, {3.00, 0.00}}}, {{{2.00, 3.00}, {2.00, 2.00}, {3.00, 0.00}}}, 
        {{{2.00, 3.00}, {0.00, 0.00}, {2.00, 2.00}}}, {{{0.00, 0.00}, {1.00, 0.00}, {2.00, 2.00}}}});

    test("inf. line, subtr. on 1.0 minuend corner, stays inside", {{{0, 0}, {5, 0}, {1, 3}}}, {{{3, 0}, {5, 0}, {3, 1}}}, 
        {{{{1.00, 3.00}, {3.00, 1.00}, {5.00, 0.00}}}, {{{1.00, 3.00}, {0.00, 0.00}, {3.00, 1.00}}}, {{{0.00, 0.00}, {3.00, 0.00}, {3.00, 1.00}}}});

    test("inf. line, subtr. on 0.0 minuend corner, stays inside", {{{0, 0}, {5, 0}, {1, 3}}}, {{{0, 0}, {2, 0}, {2, 1}}}, 
        {{{{5.00, 0.00}, {1.00, 3.00}, {2.00, 1.00}}}, {{{5.00, 0.00}, {2.00, 1.00}, {2.00, 0.00}}}, {{{1.00, 3.00}, {0.00, 0.00}, {2.00, 1.00}}}});

    test("inf. line, subtr. on 0.0 minuend corner, exits, 1", {{{0, 0}, {5, 0}, {1, 3}}}, {{{0, 0}, {2, 1}, {0, 1}}}, 
        {{{{1.00, 3.00}, {0.33, 1.00}, {2.00, 1.00}}}, {{{5.00, 0.00}, {1.00, 3.00}, {2.00, 1.00}}}, {{{5.00, 0.00}, {2.00, 1.00}, {0.00, 0.00}}}});
    test("inf. line, subtr. on 0.0 minuend corner, exits, 2", {{{0, 0}, {5, 0}, {1, 3}}}, {{{0, 0}, {2, 0}, {0, 1}}}, 
        {{{{5.00, 0.00}, {1.00, 3.00}, {2.00, 0.00}}}, {{{1.00, 3.00}, {0.29, 0.86}, {2.00, 0.00}}}});

    test("inf. line, subtr. on 1.0 minuend corner, exits, 1", {{{0, 0}, {5, 0}, {1, 3}}}, {{{3, 0}, {5, 0}, {5, 1}}}, 
        {{{{0.00, 0.00}, {3.00, 0.00}, {1.00, 3.00}}}, {{{3.00, 0.00}, {4.20, 0.60}, {1.00, 3.00}}}});

    test("inf. line, subtr. outside of 1.0 minuend corner, 1", {{{0, 0}, {5, 0}, {1, 3}}}, {{{3, 0}, {6, 0}, {3, 1}}}, 
        {{{{0.00, 0.00}, {3.00, 1.00}, {1.00, 3.00}}}, {{{3.00, 1.00}, {4.20, 0.60}, {1.00, 3.00}}}, {{{0.00, 0.00}, {3.00, 0.00}, {3.00, 1.00}}}});
    test("inf. line, subtr. outside of 1.0 minuend corner, 2", {{{2.5, 1.5}, {2.5, 4}, {0, 4}}}, {{{1.5, 2.5}, {4, 0}, {5, 0}}}, 
        {{{{0.00, 4.00}, {1.50, 2.50}, {2.50, 4.00}}}, {{{1.50, 2.50}, {2.50, 1.79}, {2.50, 4.00}}}});

    test("inf. line, subtr. outside of 0.0 minuend corner", {{{0, 0}, {5, 0}, {1, 3}}}, {{{2, 0}, {0, 1}, {-1, 0}}}, 
        {{{{5.00, 0.00}, {1.00, 3.00}, {2.00, 0.00}}}, {{{1.00, 3.00}, {0.29, 0.86}, {2.00, 0.00}}}});

    test("two inf. lines", {{{2, -1}, {1, 1}, {0, 1}}}, {{{1, 0}, {1, 1}, {0, 1}}}, {{{{2.00, -1.00}, {1.00, 1.00}, {1.00, 0.00}}}});

    test("tdd. 11", {{{-0.953402877, 0.953402877}, {-1.19175363, 1.19175363}, {-1.03285313, 0.953402877}}}, {{{-0.893815219, 0.893815219}, {-1.19175363, 1.19175363}, {-1.58900487, 1.19175363}}}, 
        {});

    test("tdd. 12", {{{-1.19175363, 1.19175363}, {-1.19175363, 1.02150309}, {-1.03285313, 0.953402877}}}, {{{-0.893815219, 0.893815219}, {-1.19175363, 1.19175363}, {-1.58900487, 1.19175363}}}, 
        {});
    test("tdd. 13", {{{-1.19175363, 1.16195977}, {-1.19175363, 1.14706278}, {-1.16158247, 1.13254297}}}, {{{-0.397251219, 0.764708519}, {-0.595876813, 1.14706278}, {-1.19175363, 1.14706278}}},
        {{{{-1.19175363, 1.14706278}, {-1.17647457, 1.14706278}, {-1.19175363, 1.16195977}}}});
    test("tdd. 14", {{{-1.58900487, 1.16195977}, {-1.56478214, 1.14706278}, {-1.19175363, 1.14706278}}}, {{{-1.19175363, 0.871469855}, {-0.893815219, 0.871469855}, {-1.58900487, 1.16195977}}},
        {{{{-1.19175363, 1.14706278}, {-1.58900476, 1.16195977}, {-1.55335402, 1.14706278}}}});
    test("tdd. 15", {{{-0.238350719, 0.220474407}, {-0.397251248, 0.379374921}, {-0.397251219, 0.36745736}}}, {{{-0.297938406, 0.275593013}, {-0.297938406, 0.573531389}, {-0.397251219, 0.36745736}}},
        {{{{-0.238350719, 0.220474407}, {-0.297938406, 0.280062079}, {-0.297938406, 0.275593013}}}, {{{-0.397251219, 0.36745736}, {-0.393375576, 0.375499249}, {-0.397251248, 0.379374921}}}});
    test("tdd. 16", {{{-0.715052187, 0.458825111}, {-0.801178932, 0.370545208}, {-0.715052187, 0.440948844}}}, {{{-0.397251219, 0.36745736}, {-0.595876813, 0.551186025}, {-1.19175363, 0.551186025}}},
        {{{{-0.801178932, 0.370545208}, {-0.715052187, 0.440948814}, {-0.729282081, 0.444239467}}}});
    test("tdd. 17", {{{-0.715052187, 0.458825111}, {-0.801178932, 0.370545208}, {-0.715052187, 0.440948844}}}, {{{-0.397251219, 0.36745736}, {-0.595876813, 0.551186025}, {-1.19175363, 0.551186025}}},
        {{{{-0.801178932, 0.370545208}, {-0.715052187, 0.440948814}, {-0.729282081, 0.444239467}}}});

    test("minuend_outside_count 2, subtr_inside_count 1, inters_count 4", {{{-0.953402877, 0.463294208}, {-0.715052187, 0.224943489}, {-0.715052187, 0.463294208}}}, {{{-0.794502437, 0.374905825}, {-0.397251219, 0.374905825}, {-1.19175363, 0.562358737}}}, 
        {{{{-0.715052187, 0.463294208}, {-0.771877468, 0.463294208}, {-0.715052187, 0.449886978}}}, {{{-0.715052187, 0.224943489}, 
        {-0.715052187, 0.374905825}, {-0.794502437, 0.374905825}}}, {{{-0.715052187, 0.224943489}, {-0.794502437, 0.374905825}, {-0.928016424, 0.437907726}}}});

    test("tdd. 18", {{{-0.0993128046, 0.993128002}, {-0.108341239, 1.08341229}, {-0.113500349, 1.02150309}}}, {{{-0.108341239, 0.975071132}, {-0.108341239, 1.08341229}, {-0.11917536, 1.07257819}}}, 
        {{{{-0.0993128046, 0.993128002}, {-0.108341239, 1.08341229}, {-0.108341239, 1.01118493}}}});

    test("tdd. 19", {{{-0.0851252601, 0.68100208}, {-0.11917536, 0.667382002}, {-0.113265887, 0.650047362}}}, {{{-0.0993128046, 0.595876813}, {-0.0993128046, 0.695189655}, {-0.108341239, 0.650047421}}}, 
        {{{{-0.0851252601, 0.68100208}, {-0.0993128046, 0.675327063}, {-0.0993128046, 0.665395796}}}, {{{-0.11917536, 0.667382002}, {-0.113265887, 0.650047362}, {-0.103630759, 0.673599839}}}, {{{-0.113265887, 0.650047362}, {-0.10695225, 0.656992376}, {-0.103630759, 0.673599839}}}});

    test("tdd. 20", {{{-0.297938406, 0.496564001}, {-0.331042677, 0.496564001}, {-0.322095573, 0.483143359}}}, {{{-0.297938406, 0.496564001}, {-0.325023711, 0.541706145}, {-0.325023711, 0.433364958}}},
        {{{{-0.331042677, 0.496564001}, {-0.325023711, 0.487535566}, {-0.325023711, 0.496564001}}}});

    test("tdd. 21", {{{-0.0851252601, 0.510751545}, {-0.0916733593, 0.550040126}, {-0.108341239, 0.520037949}}}, {{{-0.0993128046, 0.496564001}, {-0.108341239, 0.541706145}, {-0.216682479, 0.541706145}}},
        {{{{-0.0851252601, 0.510751545}, {-0.0916733593, 0.550040126}, {-0.103630759, 0.518153727}}}, {{{-0.0916733593, 0.550040126}, {-0.105154738, 0.525773644}, {-0.103630759, 0.518153727}}}});

    test("tdd. 22", {{{0.993128002, 1.19175351}, {1.19175351, 0.993128002}, {1.19175351, 1.19175351}}}, {{{0.595876813, 0.595876813}, {1.19175363, 1.19175363}, {0, 1.19175363}}},
        {{{{1.19175351, 0.993128002}, {1.19175351, 1.19175351}, {1.09244072, 1.09244072}}}});

    test("tdd. 23", {{{-0.595876813, 0.993128002}, {-0.397251219, 0.993128002}, {-0.595876813, 1.19175351}}}, {{{-0.397251219, 0.794502437}, {-0.595876813, 1.19175363}, {-1.19175363, 1.19175363}}}, 
        {{{{-0.397251219, 0.993128002}, {-0.595876813, 1.19175363}, {-0.496564001, 0.993128002}}}});

    test("tdd. 24", {{{-0.510751545, 0.851252556}, {-0.34050104, 0.68100208}, {-0.34050104, 0.851252556}}}, {{{-0.794502437, 0.794502437}, {-0.397251219, 0.794502437}, {-1.19175363, 1.19175363}}}, 
        {{{{-0.34050104, 0.851252556}, {-0.510751665, 0.851252675}, {-0.397251219, 0.794502437}}}, {{{-0.34050104, 0.851252556}, {-0.397251219, 0.794502437}, {-0.34050104, 0.68100208}}}, {{{-0.397251219, 0.794502437}, {-0.454001427, 0.794502437}, {-0.34050104, 0.68100208}}}});

    test("tdd. 25", {{{-0.510751545, 1.02150309}, {-0.595876813, 1.19175351}, {-0.794502437, 1.19175351}}}, {{{-0.595876813, 0.595876813}, {-0.595876813, 1.19175363}, {-1.19175363, 1.19175363}}}, 
        {{{{-0.510751545, 1.02150309}, {-0.595876813, 1.19175351}, {-0.595876813, 1.07257819}}}});

    test("minuend_outside_count 3, subtr_inside_count 0, inters_count 0, minuend very small", {{{-1.39038348, 1.18430519}, {-1.19175363, 1.18430519}, {-1.19175363, 1.18616724}}}, {{{-1.58900487, 1.18430519}, {-1.19175363, 1.18430519}, {-1.58900487, 1.58155632}}},
        {{{{-1.19175363, 1.18616724}, {-1.19359839, 1.18614995}, {-1.19175363, 1.18430519}}}});

    test("minuend_outside_count 1, subtr_inside_count 2, inters_count 2; test 1", {{{-0.0993128046, 0.595876813}, {-0.0993128046, 0.695189655}, {-0.11917536, 0.635601878}}}, {{{-0.0993128046, 0.595876753}, {-0.108341239, 0.650047362}, {-0.216682479, 0.650047362}}},
        {{{{-0.0993128046, 0.695189655}, {-0.114360206, 0.650047362}, {-0.108341239, 0.650047362}}}, {{{-0.0993128046, 0.695189655}, {-0.108341239, 0.650047362}, {-0.0993128046, 0.595876753}}}});

    test("minuend_outside_count 1, subtr_inside_count 2, inters_count 2; test 2", {{{-0.0851252601, 0.34050104}, {-0.11917536, 0.28942588}, {-0.0916733593, 0.275020063}}}, {{{-0.0916733593, 0.275020063}, {-0.0993128046, 0.297938406}, {-0.198625609, 0.297938406}}},
        {{{{-0.0851252601, 0.34050104}, {-0.113500342, 0.297938406}, {-0.0993128046, 0.297938406}}}, {{{-0.0851252601, 0.34050104}, {-0.0993128046, 0.297938406}, {-0.0916733593, 0.275020063}}}});

    test("minuend_outside_count 1, subtr_inside_count 2, inters_count 2; test 3", {{{-0.794502437, 0.787053883}, {-0.794502437, 0.487253428}, {-0.397251219, 0.389802724}}}, {{{-0.397251219, 0.389802724}, {-0.695876813, 0.584704101}, {-1.19175363, 0.584704101}}},
        {{{{-0.794502437, 0.787053883}, {-0.794502437, 0.584704101}, {-0.695876837, 0.584704101}}}, {{{-0.794502437, 0.787053883}, {-0.695876837, 0.584704101}, {-0.397251219, 0.389802724}}}});

    test("minuend_outside_count 1, subtr_inside_count 2, inters_count 2", {{{-0.794502437, 0.787053883}, {-0.794502437, 0.487253428}, {-0.397251219, 0.389802724}}}, {{{-0.397251219, 0.389802724}, {-0.595876813, 0.584704101}, {-1.19175363, 0.584704101}}},
        {{{{-0.794502437, 0.787053883}, {-0.794502437, 0.584704101}, {-0.595876813, 0.584704101}}}});

    test("minuend_outside_count 3, subtr_inside_count 1, inters_count 2", {{{-0.541706145, 0.108341239}, {-0.476701438, 0.108341239}, {-0.48076424, 0.148969203}}}, {{{-0.595876813, 0.11917536}, {-0.476701438, 0.11917536}, {-0.662085295, 0.132417068}}}, 
        {{{{-0.48076424, 0.148969203}, {-0.520736873, 0.122320749}, {-0.47779265, 0.1192533}}}, {{{-0.541706145, 0.108341239}, {-0.476701438, 0.108341239}, {-0.525454998, 0.11917536}}}, {{{-0.476701438, 0.108341239}, {-0.477784842, 0.11917536}, {-0.525454998, 0.11917536}}}});

    test("very small minuend in relation to subtr.; test 1", {{{-0.202349842, 0.595876813}, {-0.0223453641, 0.595876813}, {-0.0223453809, 0.601624846}}}, {{{-0.607049525, 0.595876813}, {-0.0111727118, 0.595876813}, {-1.21409905, 1.19175363}}}, 
        {});

    test("very small minuend in relation to subtr.; test 2", {{{1.18802929, 0.397251219}, {1.18709385, 0.398186624}, {1.18616724, 0.397251219}}}, {{{1.18728447, 0.238350719}, {1.48410559, 0.297938406}, {1.18728447, 0.476701438}}}, 
        {{{{1.18709385, 0.398186624}, {1.18616724, 0.397251219}, {1.18728447, 0.397996008}}}, {{{1.18616724, 0.397251219}, {1.18728447, 0.397251219}, {1.18728447, 0.397996008}}}});

    test("very small minuend in relation to subtr.; test 3", {{{-0.173642039, 0.681784749}, {-0.173145756, 0.68187654}, {-0.168624848, 0.695189655}}}, {{{-0.151762366, 0.744845986}, {-0.173442706, 0.851252556}, {-0.173442706, 0.68100208}}}, 
        {});
#endif
    
#if false
    test("", {{{-0.404699683, 0.794502437}, {-0.303524762, 0.595876813}, {-0.022345379, 0.601516008}}}, {{{-0.607049525, 0.595876813}, {-0.0111727118, 0.595876813}, {-1.21409905, 1.19175363}}}, 
        {});

    test("", {{{-0.598670006, 0.44690761}, {-0.532151103, 0.397251219}, {-0.481170505, 0.4173944}}}, {{{-0.59960103, 0.397251219}, {-0.400975436, 0.397251219}, {-0.719521224, 0.476701438}}}, 
        {});
    
    test("", {{{-0.359760612, 0.715052128}, {-0.240585253, 0.715052128}, {-0.39973402, 0.794502378}}}, {{{-0.267316937, 0.662085295}, {-0.134899884, 0.662085295}, {-0.30073157, 0.744845986}}}, 
        {});
    
    test("", {{{-0.110372633, 0.108341239}, {-0.110372633, 0.216682479}, {-0.121409893, 0.11917536}}}, {{{-0.218713865, 0.216682479}, {-0.110372633, 0.108341239}, {-0.110372633, 0.216682479}}}, 
        {});
    
    test("", {{{-0.160390168, 0.158900484}, {-0.160390168, 0.0916733593}, {-0.0933922231, 0.0916733593}}}, {{{-0.185065582, 0.0916733593}, {-0.0933922231, 0.0916733593}, {-0.185065582, 0.183346719}}}, 
        {});
#endif

    end_test();
}

void convex_hull_tests() {
    std::vector<glm::vec2> pts = {{0, 0}, {1, 0}, {1, 1}, {0, 1}, {0.5f, 0.5f}};
    inplace_convex_hull(pts);

    print(pts);
}

int main() {
    triangle_boolean_tests();
    convex_hull_tests();
    return 0;
}